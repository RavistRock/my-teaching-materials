// –ó–∞–º–µ–Ω–∏—Ç–µ –í–ï–°–¨ –∫–æ–¥ –≤ script.js –Ω–∞ —ç—Ç–æ—Ç:

const MATERIALS_JSON = './materials.json';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
async function uploadFile() {
    const fileInput = document.getElementById('fileInput');
    const messageEl = document.getElementById('message');

    if (fileInput.files.length === 0) {
        messageEl.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª.';
        messageEl.style.color = 'red';
        return;
    }

    const file = fileInput.files[0];
    const fileName = file.name;

    const reader = new FileReader();

    reader.onload = async function(e) {
        const fileData = e.target.result;

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            const response = await fetch(MATERIALS_JSON);
            const data = await response.json();
            let uploadedFiles = data.files || [];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if (uploadedFiles.some(f => f.name === fileName)) {
                messageEl.textContent = '–§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.';
                messageEl.style.color = 'red';
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            uploadedFiles.push({
                name: fileName,
                type: file.type,
                data: fileData,
                uploadDate: new Date().toLocaleDateString('ru-RU')
            });

            // –í–ê–ñ–ù–û: –ù–∞ GitHub Pages –º—ã –Ω–µ –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ JSON —Ñ–∞–π–ª,
            // –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å localStorage –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –Ω—É–∂–µ–Ω —Å–µ—Ä–≤–µ—Ä
            localStorage.setItem('teacher_files_backup', JSON.stringify(uploadedFiles));

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            displayFiles();

            messageEl.textContent = `–§–∞–π–ª "${fileName}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! (–ª–æ–∫–∞–ª—å–Ω–æ)`;
            messageEl.style.color = 'green';
            fileInput.value = '';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞
            console.log('–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –Ω—É–∂–µ–Ω —Ö–æ—Å—Ç–∏–Ω–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PHP/Node.js');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            messageEl.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.';
            messageEl.style.color = 'orange';
        }
    };

    reader.readAsDataURL(file);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function deleteFile(fileName) {
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${fileName}"?`)) {
        let uploadedFiles = JSON.parse(localStorage.getItem('teacher_files_backup')) || [];
        uploadedFiles = uploadedFiles.filter(file => file.name !== fileName);
        localStorage.setItem('teacher_files_backup', JSON.stringify(uploadedFiles));
        displayFiles();

        const messageEl = document.getElementById('message');
        messageEl.textContent = `–§–∞–π–ª "${fileName}" –±—ã–ª —É–¥–∞–ª–µ–Ω.`;
        messageEl.style.color = 'orange';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
async function displayFiles() {
    const materialsList = document.getElementById('materialsList');

    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ JSON, –µ—Å–ª–∏ –Ω–µ—Ç - –∏–∑ localStorage
    let uploadedFiles = [];

    try {
        const response = await fetch(MATERIALS_JSON);
        const data = await response.json();
        uploadedFiles = data.files || [];

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const localFiles = JSON.parse(localStorage.getItem('teacher_files_backup')) || [];
        const allFiles = [...uploadedFiles, ...localFiles.filter(localFile =>
            !uploadedFiles.some(jsonFile => jsonFile.name === localFile.name)
        )];

        uploadedFiles = allFiles;
    } catch (error) {
        // –ï—Å–ª–∏ JSON –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
        uploadedFiles = JSON.parse(localStorage.getItem('teacher_files_backup')) || [];
    }

    materialsList.innerHTML = '';

    if (uploadedFiles.length === 0) {
        materialsList.innerHTML = '<p>–ü–æ–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç.</p>';
        return;
    }

    uploadedFiles.forEach(file => {
        const fileCard = document.createElement('div');
        fileCard.className = 'file-card';

        let icon = 'üìÑ';
        if (file.type.includes('pdf')) icon = 'üìï';
        else if (file.type.includes('word') || file.type.includes('document')) icon = 'üìò';
        else if (file.type.includes('image')) icon = 'üñºÔ∏è';
        else if (file.type.includes('video')) icon = 'üé¨';
        else if (file.type.includes('audio')) icon = 'üéµ';
        else if (file.type.includes('zip') || file.type.includes('archive')) icon = 'üóúÔ∏è';

        fileCard.innerHTML = `
            <div class="file-icon">${icon}</div>
            <div class="file-name">${file.name}</div>
            <div class="file-date">${file.uploadDate}</div>
            <div class="file-actions">
                <a href="${file.data}" download="${file.name}" class="download-btn">–°–∫–∞—á–∞—Ç—å</a>
                <button onclick="deleteFile('${file.name}')" class="delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;

        materialsList.appendChild(fileCard);
    });
}

// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', displayFiles);
